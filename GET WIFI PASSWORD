Code Implementation:
In this program we use
We need to import the sub-process module in this way.

import subprocess
Sub-process. Check output (): this is used to get the output of the calling program in python. . The args argument holds the commands that are to be passed as a string.

See also  Learn Python in a Week [Beginners]
We need to decode the output so that we get strings back and not bytes.

The split () method splits a string into a list.

Decoding UTF-8 Strings in Python

To decode a string encoded in UTF-8 format, we can use the decode () method specified on strings. This method accepts two arguments, encoding and error. Encoding accepts the encoding of the string to be decoded, and error decides how to handle errors that arise during decoding.

data = (
    subprocess.check_output([“netsh”, “wlan”, “show”, “profiles”])

    .decode(“utf-8”)
    .split(“\n”)
)

profiles = [i.split(“:”)[1][1:-1] for i in data if “All User Profile” in i]

for i in profiles:

    results = (
        subprocess
        .check_output([“netsh”, “wlan”, “show”, “profile”, i, “key=clear”])

        .decode(“utf-8”)
        .split(“\n”)
    )

    results = [b.split(“:”)[1][1:-1] for b in results if “Key Content” in b]
<span id="speechify-first-word-listening-nudge-root-31" style="position: absolute; z-index: 10000;"></span><span id="speechify-first-word-listening-nudge-31">data = (
</span>    subprocess.check_output(["netsh", "wlan", "show", "profiles"])
    .decode("utf-8")
    .split("\n")
)
profiles = [i.split(":")[1][1:-1] for i in data if "All User Profile" in i]
for i in profiles:
    results = (
        subprocess
        .check_output(["netsh", "wlan", "show", "profile", i, "key=clear"])
        .decode("utf-8")
        .split("\n")
    )
    results = [b.split(":")[1][1:-1] for b in results if "Key Content" in b]
Try and except statements are used to catch and handle exceptions in Python. Statements that can raise exceptions are kept inside the try clause.

    try:
        print(“{:<30}|  {:<}”.format(i, results[0]))
    except IndexError:
        print(“{:<30}|  {:<}”.format(i, “”))

  <span id="speechify-first-word-listening-nudge-root-37" style="position: absolute; z-index: 10000;"></span><span id="speechify-first-word-listening-nudge-37">try:
</span>      print("{:<30}|  {:<}".format(i, results[0]))
  except IndexError:
      print("{:<30}|  {:<}".format(i, ""))
{We have completed the coding part now let’s look at the complete source code.}

Source code:
Here is the complete source code of the project.
<span id="speechify-first-word-listening-nudge-root-40" style="position: absolute; z-index: 10000;"></span><span id="speechify-first-word-listening-nudge-40">import subprocess
 
data =</span> (
    subprocess.check_output(["netsh", "wlan", "show", "profiles"])
    .decode("utf-8")
    .split("\n")
)
profiles = [i.split(":")[1][1:-1] for i in data if "All User Profile" in i]
for i in profiles:
    results = (
        subprocess
        .check_output(["netsh", "wlan", "show", "profile", i, "key=clear"])
        .decode("utf-8")
        .split("\n")
    )
    results = [b.split(":")[1][1:-1] for b in results if "Key Content" in b]
    try:
        print("{:<30}|  {:<}".format(i, results[0]))
    except IndexError:
        print("{:<30}|  {:<}".format(i, ""))
We have completed the coding part now it’s time to run our program.
